#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

job_name=harvest-report
report_file=$(mktemp)
day=$(date +%Y-%m-%d)

function cleanup() {
  rm -rf "$report_file"
}

trap cleanup EXIT

job_count=$(psql -At -h {{ catalog_ckan_db_host }} -U {{ catalog_ckan_db_user }} --set ON_ERROR_STOP=1 {{ catalog_ckan_db_name }} -c $'SELECT count(*) FROM harvest_job WHERE status = \'Running\';')
if [[ "$job_count" -eq 0 ]]; then
  # nothing to report, exit ok
  exit 0
fi

psql -h {{ catalog_ckan_db_host }} -U {{ catalog_ckan_db_user }} --set ON_ERROR_STOP=1 {{ catalog_ckan_db_name }} <<SQL > $report_file
(SELECT 1 as "#", 'created' as stage, count(*) as count, MIN(created) as oldest FROM harvest_job  WHERE status = 'Running' AND gather_started IS NULL)
UNION
(SELECT 2 as "#", 'gathering' as stage, count(*) as count, MIN(gather_started) as oldest FROM harvest_job  WHERE status = 'Running' AND gather_started IS NOT NULL AND gather_finished IS NULL)
UNION
(SELECT 3 as "#", 'gathered' as stage, count(*) as count, MIN(gather_finished) as oldest FROM harvest_job  WHERE status = 'Running' AND gather_finished IS NOT NULL AND finished IS NULL)
UNION
(SELECT 4 as "#", 'fetched' as stage, count(*) as count, MIN(finished) as oldest FROM harvest_job  WHERE status = 'Running' AND finished IS NOT NULL)
UNION
(SELECT 5 as "#", 'total running' as stage, count(*) as count, MIN(created) as oldest FROM harvest_job  WHERE status = 'Running')
ORDER BY "#";


SELECT j.id, j.created, s.title, s.description, j.gather_started, j.gather_finished, j.finished, j.status
FROM harvest_job as j, harvest_source as s
WHERE j.status = 'Running' AND j.source_id = s.id
ORDER BY created;
SQL

mail -s "[$job_name] In-progress harvest job report for $day" -a "From: no-reply+${job_name}@data.gov" {{ datagov_team_email }} <<EOF
Hello team,

This is a daily report for harvest jobs in progress on ${day}.

$(cat "$report_file")

--
$(basename "$0") on $(hostname)
https://github.com/GSA/datagov-deploy
EOF
